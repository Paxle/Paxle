/**
 * This file is part of the Paxle project.
 * Visit http://www.paxle.net for more information.
 * Copyright 2007-2009 the original author or authors.
 *
 * Licensed under the terms of the Common Public License 1.0 ("CPL 1.0").
 * Any use, reproduction or distribution of this program constitutes the recipient's acceptance of this agreement.
 * The full license text is available under http://www.opensource.org/licenses/cpl1.0.txt
 * or in the file LICENSE.txt in the root directory of the Paxle distribution.
 *
 * Unless required by applicable law or agreed to in writing, this software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package org.paxle.parser;

import java.util.Collection;
import java.util.Map;
import java.util.Set;

import org.osgi.framework.Constants;

public interface ISubParserManager {
		
	/**
	 * This function returns a map containing all {@link ISubParser sub-parsers} currently registered
	 * to the system. The keys of this map are a {@link Constants#SERVICE_PID} of the parsers.
	 * 
	 * @return an map containing all currently registered {@link ISubParser sub-parsers}
	 */
	public Map<String,ISubParser> getSubParsers();
	
	/**
	 * @param mimeType the mimetype
	 * @return a collection of all available {@link ISubParser sub-parsers} for the mime-type
	 */
	public Collection<ISubParser> getSubParsers(String mimeType);
	
	/**
	 * @param mimeType the mimetype
	 * @return a {@link ISubParser parser} supporting the given mimetype.
	 */	
	public ISubParser getSubParser(String mimeType);	
	
	/**
	 * @return a list of known but disabled mime-types
	 */
	public Set<String> disabledMimeTypes();
	
	/**
	 * Disable parsing of a given mime-type
	 * @param mimeType the mime-type to disable 
	 */
	public void enableMimeType(String mimeType);
	
	/**
	 * Enables parsing of a given mime-type
	 * @param mimeType the mime-type to enable
	 */
	public void disableMimeType(String mimeType);
	
	/**
	 * Enables the parser identified by the given ID
	 * @param service the ID of the parser as returned by {@link #enabledParsers()} or {@link #getParsers()}
	 */
	public void enableParser(String service);
	
	/**
	 * Disables the parser identified by the given ID
	 * @param service the ID of the parser as returned by {@link #enabledParsers()} or {@link #getParsers()}
	 */
	public void disableParser(String service);
	
	/**
	 * @return a set of parser-ids as generated by this manager from parsers which are currently enabled
	 */
	public Set<String> enabledParsers();
	
	/**
	 * @return a set of parser-ids as generated by this manager
	 */
	public Map<String,Set<String>> getParsers();
	
	/**
	 * @return an unmodifiable collection of all mime-types supported by the registered {@link ISubParser sub-parsers}
	 * 	This list also includes the {@link #disabledMimeTypes() disabled-mimeTypes}
	 */
	public Collection<String> getMimeTypes();
	
	/**
	 * Determines if a given mimeType is supported by at least one of the registered {@link ISubParser sub-parser}.
	 * 
	 * @param mimeType the mime-type
	 * @return <code>true</code> if the given mimetype is supported or <code>false</code> otherwise
	 */	
	public boolean isSupported(String mimeType);
	
	/**
	 * Releases all resources this {@link ISubParserManager} uses, saves the local state and closes the manager.
	 */
	public void close();
}
